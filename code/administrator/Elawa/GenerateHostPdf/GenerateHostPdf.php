<?php

namespace administrator\Elawa\GenerateHostPdf;

require_once PATH_ADMIN . '/Elawa/Elawa.php';
require_once PATH_INCLUDE . '/pdf/tcpdf/tcpdf.php';

/**
 * Generates pdf-files containing an overview of meetings for the hosts
 */
class GenerateHostPdf extends \administrator\Elawa\Elawa {

	/////////////////////////////////////////////////////////////////////
	//Methods
	/////////////////////////////////////////////////////////////////////

	public function execute($dataContainer) {

		parent::entryPoint($dataContainer);
		if(isset($_GET['action']))
			$this->checkRooms();
		else
			$this->generate();
	}

	/////////////////////////////////////////////////////////////////////
	//Implements
	/////////////////////////////////////////////////////////////////////

	/**
	 * Generates the PDFs and provides the download
	 */
	protected function generate($skipWarning = false) {

		$hosts = $this->getHosts();
		$this->_categories = $this->_pdo->query("SELECT * FROM ElawaCategories")->fetchAll();
		foreach($hosts as $host) {
			$this->generatePdf($host);
		}
		$this->provideDownload();
	}
	
	protected function checkRooms(){
		$str = "";
		$warning = false;
		$inString = array();
		$meetings = $this->_pdo->query("SELECT m.*, u.forename, u.name FROM ElawaMeetings m JOIN SystemUsers u ON (m.hostId = u.ID)")->fetchAll();
		foreach ( $meetings as $meeting){
			if($meeting['roomId'] == 0 && !in_array($meeting['hostId'], $inString)){
				$str .="Für ".$meeting['forename']." ".$meeting['name']." wurde noch kein Raum ausgewählt.<br>";
				$warning = true;
				$inString[] = $meeting['hostId'];
			}
		}
		$str .= "Trotzdem fortfahren?";
		dieJson(array($warning, $str));
	}


	/**
	 * Fetches the meetings and some related data of a host
	 * Uses a prepare-Query and caches the statement, so calling it multiple
	 * times is not that bad.
	 * @param  \Babesk\ORM\SystemUsers $host
	 * @return array       The meetings
	 */
	protected function fetchMeetingsForHost($host) {

		if(!$this->_meetingQueryStmt) {
			$this->_meetingQueryStmt = $this->_pdo->prepare(
				'SELECT u.forename AS userForename, u.name AS userName,
					m.time AS meetingTime, m.categoryId AS categoryId,
					m.isDisabled AS isDisabled, r.name AS roomName
				FROM ElawaMeetings m
				LEFT JOIN SystemUsers u ON u.ID = m.visitorId
				LEFT JOIN SystemRooms r ON r.id = m.roomId
				WHERE m.hostId = ?
			');
		}
		$this->_meetingQueryStmt->execute(array($host['ID']));
		$meetings = $this->_meetingQueryStmt->fetchAll();
		return $meetings;
	}


	/**
	 * Generates the PDF for a host and saves it locally
	 * @param  \Babesk\ORM\SystemUsers $host for the pdf
	 */
	private function generatePdf($host) {

		$meetings = $this->fetchMeetingsForHost($host);
		$pdf = new \TCPDF(
			PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8',
			false
		);
		$this->pdfMetadataSet($pdf);
		$this->pdfStaticContentSet($pdf);
		$this->pdfContentGenerate($pdf, $host, $meetings);
		$this->pdfOutput($pdf, $host);
	}

	private function pdfMetadataSet($pdf) {

		$pdf->SetCreator(PDF_CREATOR);
		$pdf->SetAuthor('BaBeSK Autogenerated');
		$pdf->SetTitle('Lehrer Übersicht');
		$pdf->SetSubject('Lehrer Übersicht');
		$pdf->SetKeywords('');
	}

	private function pdfStaticContentSet($pdf) {

		$pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '',
			PDF_FONT_SIZE_MAIN));
		$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
		$pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '',
			PDF_FONT_SIZE_DATA));
		$pdf->setFooterData(array(0,0,0), array(0,0,0));
		$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
		$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP,
			PDF_MARGIN_RIGHT);
		$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
		$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
		$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
		$pdf->setFontSubsetting(true);
		$pdf->SetFont('helvetica', '', 10, '', true);
		$pdf->setTextShadow($this->_textShadowStyle);
	}

	/**
	 * Generates the content for the pdf
	 */
	private function pdfContentGenerate($pdf, $host, $meetings) {

		foreach($this->_categories as $category) {
			$meetingsOfCategory = array();
			foreach($meetings as $meeting) {
				if($meeting['categoryId'] == $category['id']) {
					$meetingsOfCategory[] = $meeting;
				}
			}
			$pdf->AddPage();
			$this->_smarty->assign('host', $host);
			$this->_smarty->assign('category', $category);
			$this->_smarty->assign('meetings', $meetingsOfCategory);
			$content = $this->_smarty->fetch(
				PATH_SMARTY_TPL . '/pdf/elawa-host-information.pdf.tpl'
			);
			$pdf->writeHTMLCell(
				0, 0, '', '', $content, 0, 1, 0, true, '', true
			);
		}
	}

	/**
	 * Saves the pdf locally in the temp folder
	 */
	private function pdfOutput($pdf, $host) {

		$sysTempDir = sys_get_temp_dir();
		$localTempDir = 'elawa-host-information';
		$this->_pdfTempDir = "$sysTempDir/$localTempDir";
		if(!is_dir($this->_pdfTempDir)) {
			mkdir($this->_pdfTempDir);
		}
		$name = 'elawa-host-information-' .
			"{$host['forename']}-{$host['name']}.pdf";
		$pdf->output("{$this->_pdfTempDir}/$name", 'F');
	}

	/**
	 * Combines the locally saved pdfs to a zip and provides it as a download
	 */
	private function provideDownload() {

		$zip = new \ZipArchive();
		$zipfile = "elawa-host-information.zip";
		$zipdir = "{$this->_pdfTempDir}/$zipfile";
		if($zip->open($zipdir, \ZipArchive::CREATE) !== true) {
			$this->_interface->dieError('Kann Zipdatei nicht schreiben.'.$this->_pdfTempDir);
		}
		$pdfFiles = scandir($this->_pdfTempDir);
		$zip->addEmptyDir('elawa-host-information');
		foreach($pdfFiles as $file) {
			if(pathinfo($file, PATHINFO_EXTENSION) == 'pdf') {
				$ret = $zip->addFile(
					"{$this->_pdfTempDir}/$file",
					"elawa-host-information/$file"
				);
				if(!$ret) {
					$this->_interface->dieError(
						'Konnte eine Datei nicht zur Zip hinzufügen.'
					);
				}
			}
		}
		$ret = $zip->close();
		if(!$ret) {
			$this->_interface->dieError('Kann Zipdatei nicht schreiben.');
		}
		header('Content-Type: application/zip');
		header('Content-disposition: attachment; filename='.$zipfile);
		header('Content-Length: ' . filesize($zipdir));
		readfile($zipdir);
	}

	/////////////////////////////////////////////////////////////////////
	//Attributes
	/////////////////////////////////////////////////////////////////////

	protected $_meetingQueryStmt;

	protected $_categories;

	protected $_pdfTempDir;

	private $_textShadowStyle = array(
		'enabled'=>true,
		'depth_w'=>0.2,
		'depth_h'=>0.2,
		'color'=>array(196,196,196),
		'opacity'=>1,
		'blend_mode'=>'Normal'
	);
}

?>